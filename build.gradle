import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id "com.github.hierynomus.license" version "0.11.0"
    id "com.jfrog.bintray" version "1.0"
}
allprojects {
    apply plugin : 'eclipse'
    apply plugin : 'idea'
    apply plugin : 'maven'
    apply plugin : 'signing'
    ext {
        groupName		  = 'org.gatblau.adam'
        sourceEncoding	  = 'UTF-8'
        javaVersion 	  = '1.8'
        jbossRepository	  = 'http://repository.jboss.org/nexus/content/groups/public/'
        gatblauRepository = 'http://dl.bintray.com/gatblau/releases'
        projectVersion    = '0.0.1-SNAPSHOT'
        cargoVersion 	  = '1.4.9'
        cargoContainer	  = 'jboss74x'
        cargoPort		  = 9990
        cargoHost		  = 'localhost'
        cargoUser		  = 'admin'
        cargoPwd		  = ''
        lib = [
            jpa             : 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final',
            jax_rs          : 'org.jboss.resteasy:resteasy-jaxrs:3.0.9.Final',
            jax_rs_client   : 'org.jboss.resteasy:resteasy-client:3.0.9.Final',
            ejb             : 'javax.ejb:javax.ejb-api:3.2',
            ejb_ext         : 'org.jboss.ejb3:jboss-ejb3-ext-api:1.1.0',
            cdi             : 'javax.enterprise:cdi-api:1.1',
            jms             : 'org.jboss.javaee:jboss-jms-api:1.1.0.GA',
            cucumber_weld	: 'info.cukes:cucumber-weld:1.1.6',
            cucumber_junit	: 'info.cukes:cucumber-junit:1.1.6',
            junit           : 'junit:junit:4.11',
            weld_se			: 'org.jboss.weld.se:weld-se-core:2.0.3.Final',
            jackson         : 'org.codehaus.jackson:jackson-mapper-asl:1.9.13',
            jackson_provider: 'org.jboss.resteasy:resteasy-jackson-provider:3.0.9.Final',
            slf4j			: 'org.slf4j:slf4j-api:1.7.7',
            logback         : 'ch.qos.logback:logback-classic:1.1.2',
            activemq_core   : 'org.apache.activemq:activemq-core:5.7.0',
            selenium        : 'org.seleniumhq.selenium:selenium-java:2.44.0',
            mysql           : 'mysql:mysql-connector-java:5.1.34',
            dbunit          : 'org.dbunit:dbunit:2.5.1',
            gemma           : 'org.gatblau.gemma:gemma:0.0.1'
        ]
    }
    gradle.taskGraph
            .addTaskExecutionListener(
            new CopyBeansFile(projectDir.toString(), buildDir.toString()))
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.hierynomus.license'
    group   = groupName
    version = projectVersion
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) {
        options.encoding = sourceEncoding
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url jbossRepository }
        maven { url gatblauRepository }
    }
    license {
        excludes(["**/*.txt", "**/*.properties", "**/*.xml", "**/*.md", "**/*.feature", "**/*.svg", "**/*.odg" ])
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives sourcesJar, javadocJar
    }
}

class CopyBeansFile implements TaskExecutionListener {
    private String buildDir;
    private String projectDir;
    public CopyBeansFile(String projectDir, String buildDir) {
        this.projectDir = projectDir + '/src/';
        this.buildDir = buildDir;
    }
    public void beforeExecute(final Task task) {
        if (task.name.equals("compileJava")) {
            fixFolders("main","test");
        }
    }
    public void afterExecute(final Task task, final TaskState state) {
    }
    private void fixFolders(String...folders) {
        for(String folder : folders) {
            File targetFolder = new File(String.format("%s/classes/%s/META-INF", buildDir, folder));
            File sourceFile = new File(String.format("%s/%s/resources/META-INF/beans.xml", projectDir, folder));
            if (sourceFile.exists()) {
                if (!targetFolder.exists()){
                    targetFolder.mkdirs();
                }
                File targetFile = new File(String.format("%s/classes/%s/META-INF/beans.xml", buildDir, folder));
                if (!targetFile.exists()) {
                    Files.copy(Paths.get(sourceFile.getAbsolutePath()), Paths.get(targetFile.getAbsolutePath()));
                }
            }
        }
    }
}